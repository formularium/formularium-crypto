import * as asn1js from 'asn1js';
import { Crypto } from 'node-webcrypto-ossl';
import * as pkijs from 'pkijs';
import KeyParser from '../src/keyparser';
import CRLClient from '../src/crlClient';
import IssuerCertCheck from '../src/issuerCertCheck';

import OCSP from '../src/ocsp';

const regeneratorRuntime = require('regenerator-runtime');

const webcrypto = new Crypto();
pkijs.setEngine(
  'webcrypto-mock',
  webcrypto,
  new pkijs.CryptoEngine({
    name: '',
    crypto: webcrypto,
    subtle: webcrypto.subtle,
  }),
);

const test_x509 = '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';
const root = 'p1auT6JRdmI9oNZRCImZQdBgcSpD1BLqqIscLEuPhovjVq4Ue5alHgPKE7vQ9Gwvv9ZuIK15q3rI_7DqDA6qfTq5uNaSqAZRx4gEcyodq0MpO4yk6tklRVz15_RQvEvr2XMku3fSIoSDKAyD-ZLwkmb4E0vioHh_zE2YssWfvHIBh4vN8aRByTkW_ATJziA0ZaiXpTH2VYBvtIQpmena4ikfkdBXsTEoTRiyb6ZrX66fgCbOowNUfgomgU00NRBgAS6KKceg86dc9mV2_HCLqwLj8Grtt1NNopI_5FZW-Ckzk2f3A90dmYMcow_E_-skKGY3S8epW_yCmGf7KizMBydTMSPb2-wNRDh4bTmHg8liV06NhXFqDoVe4hSmaQnuI8Ut5Ao-5VKRa6O4aLjuWqGs1byEF7zDK6JjcJM9aEs-b-GfxKBAN3OB0z-1JE_-Ees_CM-UliYa-qDHhbCThaujCVLFDLQNPVBdLdsrOkPUH6iNoKh8rEMN3XqTQ3AjUtWJxeCD-oy4Yl55VG2S9t_JChOKRFHayMUfv_45h8cE0GpWOl3jmhrbaljNpYlgKR_Add6pPYWzvBgFpt-MoZmqTQoEGxTAIBhCo3FLSM5x0Rw0ktsMsWlK7hMnU9up0ft9I06mHUzOXjj2XCK7DGwIrbuI_N5gKi5maHG8v1M';

const letsencrypt_jwk = {
  n: 'vrRDtPrBm1qR6AciQYQZZsWoO76KmFvanrKo5mIAFs29eapj9EHTlCvhMqQ2b2-5NxUTfKwwpnLuU_e2REv9YbEByt8bArCW7AW7cAD23e47U5rF-bmqWWFUhybfzX5Xj2cunwTc5A6aw00HAHoZw5EfgVRCayO2RTOKZI1FE6K7mqWhfvKIyi7RrcSZ7Fq6wM0kp0RgBYLB7_ubSAlPtLDWXsRy7utlHaraf07HM0w9b-Lv7A_nk5EWtcCyrELEd6pZ4AFgrEZyWOj8kooAm9CDAwtByFbmkq_CwXDdCEJbQccjXCEuYeu3w6KpEsvVE3dYYIoy0MyRp4AdlvGhmw',
  e: 'AQAB',
  kty: 'RSA',
  x5c: ['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'],
};

const dataport_jwk = {
  x5c: [root, test_x509],
  kty: 'RSA',

};

const letsencrypt_root = '-----BEGIN CERTIFICATE-----\n'
      + 'MIIDSjCCAjKgAwIBAgIQRK+wgNajJ7qJMDmGLvhAazANBgkqhkiG9w0BAQUFADA/\n'
      + 'MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\n'
      + 'DkRTVCBSb290IENBIFgzMB4XDTAwMDkzMDIxMTIxOVoXDTIxMDkzMDE0MDExNVow\n'
      + 'PzEkMCIGA1UEChMbRGlnaXRhbCBTaWduYXR1cmUgVHJ1c3QgQ28uMRcwFQYDVQQD\n'
      + 'Ew5EU1QgUm9vdCBDQSBYMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n'
      + 'AN+v6ZdQCINXtMxiZfaQguzH0yxrMMpb7NnDfcdAwRgUi+DoM3ZJKuM/IUmTrE4O\n'
      + 'rz5Iy2Xu/NMhD2XSKtkyj4zl93ewEnu1lcCJo6m67XMuegwGMoOifooUMM0RoOEq\n'
      + 'OLl5CjH9UL2AZd+3UWODyOKIYepLYYHsUmu5ouJLGiifSKOeDNoJjj4XLh7dIN9b\n'
      + 'xiqKqy69cK3FCxolkHRyxXtqqzTWMIn/5WgTe1QLyNau7Fqckh49ZLOMxt+/yUFw\n'
      + '7BZy1SbsOFU5Q9D8/RhcQPGX69Wam40dutolucbY38EVAjqr2m7xPi71XAicPNaD\n'
      + 'aeQQmxkqtilX4+U9m5/wAl0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNV\n'
      + 'HQ8BAf8EBAMCAQYwHQYDVR0OBBYEFMSnsaR7LHH62+FLkHX/xBVghYkQMA0GCSqG\n'
      + 'SIb3DQEBBQUAA4IBAQCjGiybFwBcqR7uKGY3Or+Dxz9LwwmglSBd49lZRNI+DT69\n'
      + 'ikugdB/OEIKcdBodfpga3csTS7MgROSR6cz8faXbauX+5v3gTt23ADq1cEmv8uXr\n'
      + 'AvHRAosZy5Q6XkjEGB5YGV8eAlrwDPGxrancWYaLbumR9YbK+rlmM6pZW87ipxZz\n'
      + 'R8srzJmwN0jP41ZL9c8PDHIyh8bwRLtTcm1D9SZImlJnt1ir/md2cXjbDaJWFBM5\n'
      + 'JDGFoqgCWjBH4d1QB7wCCZAA62RjYJsWvIjJEubSfZGL+T0yjWW06XyxV3bqxbYo\n'
      + 'Ob8VZRzI9neWagqNdwvYkQsEjgfbKbYK7p2CNTUQ\n'
      + '-----END CERTIFICATE-----';

test('Runs without crashing', () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
});

test('Returns List of CRL URLs', () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
  expect(keyparser.parseCRLURL()[1].url).toBe(
    'http://crl.identrust.com/DSTROOTCAX3CRL.crl',
  );
});

test('Return AuthorityKeyIdentifier', () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
  keyparser.parseAuthorityKeyIdentifier(keyparser.certificates[keyparser.certificates.length - 1]);
  expect(keyparser.parseCRLURL()[0].url).toBe(
    'http://x1.c.lencr.org/',
  );
});

test('Returns Root CA URL', () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
  expect(keyparser.parseCertificateAuthorityInformationAccess()[0].url).toBe(
    'http://r3.o.lencr.org',
  );
});

test('Get CRL URLS', async () => {
  const keyparser = new KeyParser.fromx509(letsencrypt_jwk);
  expect(keyparser.parseCRLURL().length).toBe(2);
});

// warning: still br0ken
test('Do OCSP request', async () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
  const ocsp = new OCSP();
  await ocsp
    .callOCSPService(
      keyparser.parseOCSPURL(),
      ocsp.createRequest('DE', 'fitconnect', keyparser.certificates[keyparser.certificates.length - 1]),
    )
    .then((resut) => {
      expect(resut).toBe(true);
    });
});

test('Do complete validation', async () => {
  const keyparser = KeyParser.fromx509(letsencrypt_jwk);
  const result = await keyparser.verify(letsencrypt_root);
  expect(result.result).toBe(
    true,
  );
});
